using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System.IO;
using System.Text;

namespace Scalar.PreBuild
{
    public class GenerateInstallScripts : Task
    {
        [Required]
        public string GitInstallerFilename { get; set; }

        [Required]
        public string ScalarSetupFilename { get; set; }

        [Required]
        public string GitInstallBatPath { get; set; }

        [Required]
        public string ScalarInstallBatPath { get; set; }

        [Required]
        public string UnifiedInstallBatPath { get; set; }

        public override bool Execute()
        {
            this.Log.LogMessage(MessageImportance.High, "Creating install scripts for " + this.GitInstallerFilename);

            File.WriteAllText(
                this.GitInstallBatPath,
                this.GetGitInstallCommand());

            File.WriteAllText(
                this.ScalarInstallBatPath,
                this.GetScalarInstallCommand());

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("REM AUTOGENERATED DO NOT EDIT");
            sb.AppendLine();
            sb.AppendLine(this.GetGitInstallCommand());
            sb.AppendLine();
            sb.AppendLine(this.GetScalarInstallCommand());

            File.WriteAllText(
                this.UnifiedInstallBatPath,
                sb.ToString());

            return true;
        }

        public string GetGitInstallCommand()
        {
            return "%~dp0\\" + this.GitInstallerFilename + @" /DIR=""C:\Program Files\Git"" /NOICONS /COMPONENTS=""ext,ext\shellhere,ext\guihere,assoc,assoc_sh"" /GROUP=""Git"" /VERYSILENT /SUPPRESSMSGBOXES /NORESTART";
        }

        public string GetScalarInstallCommand()
        {
            return "%~dp0\\" + this.ScalarSetupFilename + " /VERYSILENT /SUPPRESSMSGBOXES /NORESTART";
        }
    }
}
