steps:

  - task: DotNetCoreInstaller@0
    displayName: Use .NET Core SDK 2.1.301
    inputs:
      packageType: sdk
      version: '2.1.301'
      
  - task: InstallAppleCertificate@2	
    displayName: 'Install Apple certificate'	
    inputs:	
      certSecureFile: 'PrjFSKextCertExpiresJun6_2020_v2.p12'	
      certPwd: '$(kext.certificate.password)'	

  - script: Scripts/Mac/BuildScalarForMac.sh $(configuration) $(majorAndMinorVersion).$(revision)
    displayName: Build Scalar ($(configuration))

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/TestResult.xml'
      searchFolder: $(System.DefaultWorkingDirectory)
      testRunTitle: Mac $(configuration) Unit Tests
      publishRunAttachments: true
    condition: succeededOrFailed()

  - script: Scripts/Mac/CI/CreateBuildDrop.sh $(configuration) $(Build.ArtifactStagingDirectory)/Tests
    displayName: Create functional test drop

  - task: PublishBuildArtifacts@1
    displayName: Publish functional test drop artifact.
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/Tests
      artifactName: "FunctionalTests_$(platformFriendlyName)_$(configuration)"
      parallel: true
      parallelCount: 8
    condition: and(succeeded(), eq(variables['configuration'], 'Release'))

  - script: Scripts/Mac/CI/CreateInstallerDrop.sh $(configuration) $(Build.ArtifactStagingDirectory)/Installers
    displayName: Create installer drop

  - task: PublishBuildArtifacts@1
    displayName: Publish installers
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/Installers
      artifactName: "Installers_$(platformFriendlyName)_$(configuration)"
      parallel: true
      parallelCount: 8
    condition: and(succeeded(), eq(variables['configuration'], 'Release'))
